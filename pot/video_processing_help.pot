msgid ""
msgstr ""
"Project-Id-Version: REAPER_zh-hans\n"
"Last-Translator: All Chinese REAPER Users\n"
"Language-Team: Chinese REAPER users\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Python Script\n"
"X-Poedit-Basepath: .\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Language: en_US\n"
"X-Poedit-KeywordsList: =\n"

#: ;E51CE4222AFE4D67
msgid "special variables:"
msgstr ""

#: ;0337D9A1916E200E
msgid "&project_time: project time in seconds"
msgstr ""

#: ;1D5AF502CBE1BA4A
msgid "&project_tempo: current tempo in BPM"
msgstr ""

#: ;3270368B846B5DC6
msgid "&project_ts_num: current time signature numerator"
msgstr ""

#: ;6848839643FE4482
msgid "&project_ts_denom: current time signature denominator"
msgstr ""

#: ;6E06AA24DC66A35D
msgid "&project_time_qn: current project position in QN"
msgstr ""

#: ;E1A37D56A3D9918A
msgid "&time: item time in seconds (if in item)"
msgstr ""

#: ;4D5DAE58EA870FC1
msgid "&framerate: project FPS (30.0, 29.97, etc)"
msgstr ""

#: ;06F76119FE70ADCB
msgid "&project_w: project preferred video width"
msgstr ""

#: ;898D9A2D326E8033
msgid "&project_h: project preferred video height"
msgstr ""

#: ;E852BFFCE7BCDE7C
msgid "&project_wh_valid: set nonzero if project_w/project_h reflect actual project setting (otherwise could be media-defined)"
msgstr ""

#: ;D1978859907FA6EA
msgid "&colorspace: current rendering colorspace, e.g. 'RGBA', 'YV12', or 'YUY2'. you can override this with extreme caution."
msgstr ""

#: ;CB0DE9C8808F576B
msgid "&param_wet: if in FX form, wet/dry mix of effect. "
msgstr ""

#: ;44E331BA868AF799
msgid "&param1..param16: parameters, you can name these by adding lines: //@param <idx>[:varname] 'name' [defval minval maxval centval step]. "
msgstr ""

#: ;91F35DA3DAE4A7E8
msgid "&gfx_r: current drawing color (red 0..1)"
msgstr ""

#: ;F6C3A165119329D7
msgid "&gfx_g: current drawing color (green 0..1)"
msgstr ""

#: ;1EF9118B2B4C94ED
msgid "&gfx_b: current drawing color (blue 0..1)"
msgstr ""

#: ;7AFC73457B72DDAF
msgid "&gfx_a: current drawing alpha (0..1)"
msgstr ""

#: ;D6B20617A1ECCBF3=&gfx_mode:  0=normal, 1= additive, 3
msgid "&gfx_mode:  0=normal, 1= additive, 3=mul (works different in YUV vs RGB)"
msgstr ""

#: ;E96FF46AF8FEF5D7
msgid "           add 0x100 for blit() to enable filtering (if possible)"
msgstr ""

#: ;9769DC6BEADD874C
msgid "           add 0x10000 to use source alpha (only valid when using RGBA colorspace)"
msgstr ""

#: ;2E8A69794FCFAC94
msgid "           add 0x40000 to use extra clamping (for out of range alpha/gradient values)"
msgstr ""

#: ;56BD4F0BB4FF8FDE
msgid "           add 0x80000 to treat gfx_r/gfx_g/gfx_b as YUV values (in non-RGB colorspace)"
msgstr ""

#: ;50A40F04D456AE80
msgid "&gfx_dest: destination image handle, or -1 for main framebuffer"
msgstr ""

#: ;8BB49BF5595AD01A
msgid "functions:"
msgstr ""

#: ;A82E99FEF1CB1D07
msgid "input_count() returns number of inputs available (total), range [0..n)"
msgstr ""

#: ;6AB57721B74A32A4
msgid "input_track_count() returns the number of available inputs on discrete tracks"
msgstr ""

#: ;4265602BCBA429A2
msgid "input_track(x) returns input for bottommost item or FX on discrete-track x (0 is first track with video item above current, etc)"
msgstr ""

#: ;6FAEE048379CF602
msgid "input_track_exact_count() returns the number of tracks above the current track that could possibly contain video items."
msgstr ""

#: ;4A98602AB0C227A7
msgid "input_track_exact(x) returns input for bottommost item or FX on track relative to current track. Returns -1000 if track does not contain any video items at the current time, or -10000 if no further tracks contain video."
msgstr ""

#: ;3CEC2A3845D4B268
msgid "input_next_item(x) returns the next input after x which is on a different item or track"
msgstr ""

#: ;2D94A07B686D2CB0
msgid "input_next_track(x) returns the next input after x which is on a different track"
msgstr ""

#: ;D42638ECF02960E8
msgid "input_ismaster() returns 1.0 if current FX is on master chain, 2.0 if on monitoring FX chain"
msgstr ""

#: ;7191876125BC532B
msgid "input_info(input, w, h[,srctime, wet, parm1, ...]) returns 1 if input is available, sets w/h to dimensions. If srctime specified, it will be set with the source-local time of the underlying media. if input is a video processor in effect form, automated parameters can be queried via wet/parm1/etc."
msgstr ""

#: ;2988A0A1B40BD736
msgid "gfx_img_alloc([w,h,clear]) returns an image index for drawing (can create up to 32 images). contents of image undefined unless clear set."
msgstr ""

#: ;DC55E2859702DAED=gfx_img_resize(handle,w,h[,clear]) sets an image size (handle can be -1 for main framebuffer). contents of image undefined after resize, unless clear set. clear
msgid "gfx_img_resize(handle,w,h[,clear]) sets an image size (handle can be -1 for main framebuffer). contents of image undefined after resize, unless clear set. clear=-1 will only clear if resize occurred."
msgstr ""

#: ;D6A0BCBF61BA9FF3
msgid "gfx_img_hold(handle) (cheaply) retains a read-only copy of an image in handle. This copy should be released using gfx_img_free() when finished. Up to 32 images can be held."
msgstr ""

#: ;7A3CA3ABF1BBD066
msgid "gfx_img_getptr(handle) gets a unique identifier for an image, valid for while the image is retained. can be used (along with gfx_img_hold) to detect when frames change in a low frame rate video"
msgstr ""

#: ;84E1AAB9B8281528
msgid "gfx_img_free(handle) frees an earlier allocated image index."
msgstr ""

#: ;916EC6E2BF5EB597
msgid "gfx_img_info(handle,w,h) gets dimensions of image, returns 1 if valid (resize if inexplicably invalidated)"
msgstr ""

#: ;A3B2EEEE3BA2D5B4=gfx_set(r,g,b[,a=1,mode
msgid "gfx_set(r,g,b[,a=1,mode=0,dest]) - updates r/g/b/a/mode always, dest only if specified"
msgstr ""

#: ;17EC3BA02D7C4345=gfx_blit(input[,preserve_aspect=0,x,y,w,h,srcx,srcy,srcw,srch]) copies input to framebuffer. preserve_aspect
msgid "gfx_blit(input[,preserve_aspect=0,x,y,w,h,srcx,srcy,srcw,srch]) copies input to framebuffer. preserve_aspect=-1 for no fill in pad areas"
msgstr ""

#: ;F71F63DFD9F25AD9
msgid "gfx_fillrect(x,y,w,h) fills a rectangle"
msgstr ""

#: ;4BBC7EEFA574842C
msgid "gfx_procrect(x,y,w,h,channel_tab) processes a rectangle with 768-entry channel table [256 items of 0..1 per channel]"
msgstr ""

#: ;B502BE3BE964C1DF
msgid "gfx_gradrect(x,y,w,h, r,g,b,a"
msgstr ""

#: ;CF73192DE5929328
msgid "             [,drdx,dgdx,dbdx,dadx,"
msgstr ""

#: ;E2180F2972FDB3D4
msgid "               drdy,dgdy,dbdy,dady]);"
msgstr ""

#: ;77E7405493B30CDA=gfx_rotoblit(srcidx, angle [,x, y, w, h, srcx, srcy, w, h, cliptosrcrect = 0, centxoffs=0, centyoffs
msgid "gfx_rotoblit(srcidx, angle [,x, y, w, h, srcx, srcy, w, h, cliptosrcrect = 0, centxoffs=0, centyoffs=0])"
msgstr ""

#: ;8B5468B793761495
msgid "gfx_deltablit(srcidx, x,y,w,h srcx,srcy, dsdx, dtdx, dsdy, dtdy, dsdxdy, dtdxdy[, dadx, dady, dadxdy])"
msgstr ""

#: ;5129C7F580F6C737=gfx_xformblit(srcidx, x,y,w,h,  wdiv, hdiv, tab[, wantalpha=0]) - tab is wdiv*hdiv*2 table of src points. if wantalpha
msgid "gfx_xformblit(srcidx, x,y,w,h,  wdiv, hdiv, tab[, wantalpha=0]) - tab is wdiv*hdiv*2 table of src points. if wantalpha=1, tab is wdiv*hdiv*3 table of src points including alpha."
msgstr ""

#: ;1B39344B6381477A
msgid "gfx_keyedblit(input[,x,y,w,h,srcx,srcy,kv1,kv2,kv3,kv4]) chroma-key blits, using the source color as key. kv1-kv4 meaning depends on colorspace:"
msgstr ""

#: ;CDA668E164203267
msgid "      YV12/YUY2: kv1 is U target (-0.5 default), kv2 is V target (-0.5 default), kv3 is closeness-factor (0.4 default), kv4 is the gain (2.0 default)"
msgstr ""

#: ;98CB89AA65E731F3
msgid "      RGBA: kv1 is green-factor (1.0 default), kv2 is blue-factor (-1.0 default), kv3 is offset (-1.0 default), kv4 enables spill removal (1.0 default)"
msgstr ""

#: ;D0D5F2C8C849EB54
msgid "gfx_destkeyedblit(input[,x,y,w,h,srcx,srcy,kv1,kv2,kv3,kv4]) chroma-key blits, using destination color as key. ignores gfx_a and gfx_mode."
msgstr ""

#: ;7211013882D75680
msgid "gfx_setfont(pxsize[,#fontname, flags) - sets a font, flags can be 'B' for bold, 'I' for italics, 'BI' for bold italics, etc"
msgstr ""

#: ;E08E3CDAFC30A9D9
msgid "gfx_str_measure(#string[,w,h]) - measures the size of #string, returns width"
msgstr ""

#: ;1ADFC5D3F7EAA052
msgid "gfx_str_draw(#string[,x,y,fxc_r,fxc_g,fxc_b]) - draw string"
msgstr ""

#: ;1F988EE5EE1060F2
msgid " rgb2yuv(r,g,b) -- utility, converts r,g,b to YUV, does not clamp [0..1]"
msgstr ""

#: ;DA79705D39F43607
msgid " yuv2rgb(r,g,b) -- utility, converts YUV to r,g,b, not clamping [0..1]"
msgstr ""

#: ;0A0692473F08A26B
msgid "Video processor reference"
msgstr ""

